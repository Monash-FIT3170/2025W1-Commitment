#!/bin/sh

# npx prettier -c $(git diff --cached --name-only --diff-filter=ACMR | sed 's| |\\ |g' 2>&1 >/dev/null)
# [ $? -ne 0 ] && exit $?
# exit 0

EX_CODE=0

printf "==== checking format of svelte, ts, js etc. files with prettier ====\n"

DIFF_FILES=$(git diff --cached --name-only --diff-filter=ACMR | sed 's| |\\ |g')
[ -z "$DIFF_FILES" ] && exit 0

# Check if there are any non-compliant files
PRETTIER_FILES=$(echo "$DIFF_FILES" | xargs npx prettier --ignore-unknown --list-different | sed 's| |\\ |g')

if [[ -n "$PRETTIER_FILES" ]]; then
    printf "
The following files are non-compliant to the prettier config.

\t"

    echo $PRETTIER_FILES | sed -E 's|([^\\]) |\1\n\t|g'

    printf "
Run \`npm run fmt\` to see full list of unformatted files in project
root or use \`npm run fmt:fix\` to format files automatically.

"

    EX_CODE=1
else
    echo "==== [PASS] ===="
fi

# ---- fmt ----
printf "==== checking format of rust files ====\n"
RS_FMT_FILES=$(echo $FILES \
             | sed '/*\.rs/!d' \
             | xargs cargo fmt --check --manifest-path src-tauri/Cargo.toml -- --files-with-diff \
             | sed -E 's|.*[\\\|/](src-tauri)([\\\|/])(.*)|\1\2\3|g')

if [[ -n "$RS_FMT_FILES" ]]; then
    printf "
The following files are non-compliant to the rustfmt config.

\t"

    echo $RS_FMT_FILES | sed -E 's|([^\\]) |\1\n\t|g'

    printf "
Run \`npm run rs-fmt\` to see full list of unformatted files in rust
crate or use \`npm run rs-fmt:fix\` to format files automatically.

"

    EX_CODE=1
else
    echo "==== [PASS] ===="
fi

# ---- clippy ----
printf "==== linting rust files with clippy ====\n"
cargo clippy --manifest-path src-tauri/Cargo.toml -- -Dwarnings 2> /dev/null

if [[ $? -eq 101 ]]; then
    printf "\nLint errors/warnings found in rust code.\n"

    printf "
Run \`npm run rs-lint\` to see lint suggestions or use \`npm run rs-lint:fix\` to
apply lint suggestions to rust crate automatically.

"

    EX_CODE=1
else
    echo "==== [PASS] ===="
fi

exit $EX_CODE

